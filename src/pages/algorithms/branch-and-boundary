---
title: Branch and Bound Algorithms
---

Branch and boundalgorithms are design paradigms for discrete and combinatorial optimization problems, as well as 
mathematical optimization. A branch-and-bound algorithm consists of systematic enumeration of candidate solutions by means of state space
search: the set of candidate solutions is thought of as forming a rooted tree with the full set at the root. The algorithm explores 
branches of this tree, which represent subsets of the solution set. Before enumerating the candidate solutions of a branch, the branch is
checked against upper and lower estimated bounds on the optimal solution, and is discarded if it cannot produce a better solution than the
best one found so far by the algorithm. 

The algorithm depends on the efficient estimation of the lower and upper bounds of a region/branch of the search space and approaches 
exhaustive enumeration as the size (n-dimensional volume) of the region tends to zero.

---
header: Overview
---

Generic Version

The following is the skeleton of a generic branch and bound algorithm for minimizing an arbitrary objective function f. To obtain an actual 
algorithm from this, one requires a bounding function g, that computes lower bounds of f on nodes of the search tree, as well as a 
problem-specific branching rule.

1. Using a heuristic, find a solution x_h to the optimization problem. Store its value, B = f(x_h). (If no heuristic is available, set B to 
infinity.) B will denote the best solution found so far, and will be used as an upper bound on candidate solutions.

2. Initialize a queue to hold a partial solution with none of the variables of the problem assigned. 

3. Loop until the queue is empty:
  1. Take a node N off the queue.
  2. If N represents a single candidate solution x and f(x) < B, then x is the best solution so far. Record it and set B <- f(x).
  3. Else, branch on N to produce new nodes N_i. For each of these:
    1. If g(N_i)>B, do nothing; since the lower bound on this node is greater than the upper bound of the problem, it will never lead 
       to the optimal solution, and can be discarded.
    2. Else, store N_i on the queue.
